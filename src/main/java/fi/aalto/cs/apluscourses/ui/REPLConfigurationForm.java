package fi.aalto.cs.apluscourses.ui;

import static fi.aalto.cs.apluscourses.presentation.REPLConfigurationModel.showREPLConfigWindow;
import static java.util.Objects.requireNonNull;

import com.intellij.openapi.fileChooser.FileChooserDescriptor;
import com.intellij.openapi.project.Project;
import com.intellij.openapi.ui.ComboBox;
import com.intellij.openapi.ui.TextFieldWithBrowseButton;
import com.intellij.openapi.vfs.VirtualFile;
import com.intellij.uiDesigner.core.GridConstraints;
import com.intellij.uiDesigner.core.GridLayoutManager;
import com.intellij.uiDesigner.core.Spacer;
import fi.aalto.cs.apluscourses.presentation.REPLConfigurationModel;
import java.awt.Dimension;
import java.awt.Insets;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JCheckBox;
import javax.swing.JComponent;
import javax.swing.JLabel;
import javax.swing.JPanel;

public class REPLConfigurationForm extends JPanel {

  private REPLConfigurationModel model;

  private TextFieldWithBrowseButton workingDirectoryField;
  private ComboBox moduleComboBox;
  private JCheckBox dontShowThisWindowCheckBox;
  private JPanel contentPane;

  public REPLConfigurationForm() {
  }

  public REPLConfigurationForm(REPLConfigurationModel model) {
    this.model = model;
    dontShowThisWindowCheckBox.setSelected(false);
    dontShowThisWindowCheckBox.addActionListener(new ActionListener() {
      public void actionPerformed(ActionEvent e) {
        showREPLConfigWindow = !showREPLConfigWindow;
      }
    });

    addFileChooser("Choose Working Directory", workingDirectoryField, model.getProject());
    workingDirectoryField.setText(model.getWorkingDirectory());

    model.getModules().forEach(moduleName -> moduleComboBox.addItem(moduleName));
    moduleComboBox.setSelectedItem(model.getTargetModuleName());
    moduleComboBox.setEnabled(showREPLConfigWindow);
    moduleComboBox.setRenderer(new ModuleComboBoxListRenderer());
  }

  private void addFileChooser(final String title,
      final TextFieldWithBrowseButton textField,
      final Project project) {
    final FileChooserDescriptor fileChooserDescriptor = new FileChooserDescriptor(false, true,
        false, false, false, false) {
      @Override
      public boolean isFileVisible(VirtualFile file, boolean showHiddenFiles) {
        return super.isFileVisible(file, showHiddenFiles) && file.isDirectory();
      }
    };
    fileChooserDescriptor.setTitle(title);
    textField.addBrowseFolderListener(title, null, project, fileChooserDescriptor);
  }

  public JPanel getContentPane() {
    return contentPane;
  }

  public void setContentPane(JPanel contentPane) {
    this.contentPane = contentPane;
  }

  protected void updateModel(){
    model.setTargetModuleName(requireNonNull(moduleComboBox.getSelectedItem()).toString());
    model.setWorkingDirectory(workingDirectoryField.getText());
  }

  public REPLConfigurationModel getModel() {
    return model;
  }

  public void setModel(REPLConfigurationModel model) {
    this.model = model;
  }

  {
// GUI initializer generated by IntelliJ IDEA GUI Designer
// >>> IMPORTANT!! <<<
// DO NOT EDIT OR ADD ANY CODE HERE!
    $$$setupUI$$$();
  }

  /**
   * Method generated by IntelliJ IDEA GUI Designer >>> IMPORTANT!! <<< DO NOT edit this method OR
   * call it in your code!
   *
   * @noinspection ALL
   */
  private void $$$setupUI$$$() {
    contentPane = new JPanel();
    contentPane.setLayout(new GridLayoutManager(6, 1, new Insets(0, 0, 0, 0), -1, -1));
    final Spacer spacer1 = new Spacer();
    contentPane.add(spacer1, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_CENTER,
        GridConstraints.FILL_VERTICAL, 1, GridConstraints.SIZEPOLICY_WANT_GROW, null, null, null, 0,
        false));
    final JLabel label1 = new JLabel();
    label1.setText("Working directory:");
    contentPane.add(label1,
        new GridConstraints(1, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE,
            GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0,
            false));
    workingDirectoryField = new TextFieldWithBrowseButton();
    contentPane.add(workingDirectoryField,
        new GridConstraints(2, 0, 1, 1, GridConstraints.ANCHOR_CENTER,
            GridConstraints.FILL_HORIZONTAL,
            GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW,
            GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null,
            new Dimension(595, 38), null, 0, false));
    final JLabel label2 = new JLabel();
    label2.setText("Use classpath and SDK of module:");
    contentPane.add(label2,
        new GridConstraints(3, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE,
            GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null,
            new Dimension(595, 21), null, 0, false));
    moduleComboBox = new ComboBox();
    final DefaultComboBoxModel defaultComboBoxModel1 = new DefaultComboBoxModel();
    moduleComboBox.setModel(defaultComboBoxModel1);
    contentPane.add(moduleComboBox, new GridConstraints(4, 0, 1, 1, GridConstraints.ANCHOR_WEST,
        GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_GROW,
        GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(595, 38), null, 0, false));
    dontShowThisWindowCheckBox = new JCheckBox();
    dontShowThisWindowCheckBox.setText("Don't show this window again");
    contentPane.add(dontShowThisWindowCheckBox,
        new GridConstraints(5, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE,
            GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW,
            GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(595, 23), null, 0, false));
  }

  /**
   * @noinspection ALL
   */
  public JComponent $$$getRootComponent$$$() {
    return contentPane;
  }
}
