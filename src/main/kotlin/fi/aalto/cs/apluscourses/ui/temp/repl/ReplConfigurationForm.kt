package fi.aalto.cs.apluscourses.ui.temp.repl

import com.intellij.openapi.fileChooser.FileChooserDescriptor
import com.intellij.openapi.project.Project
import com.intellij.openapi.ui.ComboBox
import com.intellij.openapi.ui.TextFieldWithBrowseButton
import com.intellij.openapi.vfs.VirtualFile
import fi.aalto.cs.apluscourses.MyBundle
import fi.aalto.cs.apluscourses.MyBundle.message
import fi.aalto.cs.apluscourses.ui.temp.presentation.ReplConfigurationFormModel
import java.util.Objects
import java.util.function.Consumer
import javax.swing.JCheckBox
import javax.swing.JLabel
import javax.swing.JPanel

//import fi.aalto.cs.apluscourses.ui.IconListCellRenderer;
class ReplConfigurationForm : JPanel {
    private var model: ReplConfigurationFormModel? = null

    private val workingDirectoryField: TextFieldWithBrowseButton? = null
    private val moduleComboBox: ComboBox<String?>? = null
    private val dontShowThisWindowCheckBox: JCheckBox? = null
    private val contentPane: JPanel? = null
    private val infoTextLabel: JLabel? = null

    /**
     * Creates an empty REPL configuration form, bad, bad, form, do not use (but, required later on by
     * autogenerated code).
     */
    constructor()

    /**
     * Creates a workable REPL configuration form with all the bells and whistles required. Binds the
     * corresponding data model [ReplConfigurationFormModel] into it.
     */
    constructor(model: ReplConfigurationFormModel, project: Project?) {
        this.model = model

        //    dontShowThisWindowCheckBox
//        .setSelected(PluginSettings.getInstance().shouldShowReplConfigurationDialog());
        infoTextLabel!!.setText(message("ui.repl.configuration.form.infoLabel", project!!))

        addFileChooser(workingDirectoryField!!, model.project)
        workingDirectoryField.setText(model.moduleWorkingDirectory)

        model.moduleNames.forEach {
            moduleComboBox!!.addItem(it)
        }
        moduleComboBox!!.setSelectedItem(model.targetModuleName)
        moduleComboBox.setEnabled(true)
        //    moduleComboBox.setRenderer(new IconListCellRenderer<>(PluginIcons.A_PLUS_MODULE));
    }

    private fun addFileChooser(
        textField: TextFieldWithBrowseButton,
        project: Project
    ) {
        val fileChooserDescriptor: FileChooserDescriptor = object : FileChooserDescriptor(
            false, true, false,
            false, false, false
        ) {
            override fun isFileVisible(file: VirtualFile, showHiddenFiles: Boolean): Boolean {
                return super.isFileVisible(file, showHiddenFiles) && file.isDirectory
            }
        }
        fileChooserDescriptor.title = message("ui.repl.configuration.form.chooseWorkingDirectory")
        textField.addBrowseFolderListener(
            message("ui.repl.configuration.form.chooseWorkingDirectory"),
            null, project, fileChooserDescriptor
        )
    }

    /**
     * This method updates the embedded [ReplConfigurationFormModel] with the current state of
     * the [ReplConfigurationForm] build.
     */
    fun updateModel() {
        model!!.targetModuleName = moduleComboBox!!.selectedItem!!.toString()
        model!!.moduleWorkingDirectory = workingDirectoryField!!.getText()
        val chosenState = !dontShowThisWindowCheckBox!!.isSelected
        //    PluginSettings.getInstance().setShowReplConfigurationDialog(chosenState);
    }

    fun cancelReplStart() {
        model!!.startRepl = false
    }

    fun getContentPane(): JPanel? {
        return contentPane
    }

    fun getModel(): ReplConfigurationFormModel {
        return model!!
    }

    fun setModel(model: ReplConfigurationFormModel) {
        this.model = model
    }

    fun getWorkingDirectoryField(): TextFieldWithBrowseButton {
        return workingDirectoryField!!
    }

    fun getModuleComboBox(): ComboBox<String?> {
        return moduleComboBox!!
    }

    fun getDontShowThisWindowCheckBox(): JCheckBox {
        return dontShowThisWindowCheckBox!!
    }

    fun getInfoTextLabel(): JLabel {
        return infoTextLabel!!
    }
}
