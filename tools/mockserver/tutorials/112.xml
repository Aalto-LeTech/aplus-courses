<?xml version="1.0" encoding="utf-8" ?>
<tutorial start="OPEN-FILE">

    <state key="OPEN-FILE">
        <component type="project-tree">
            <highlight degree="normal"/>
            <hint title="Open Table.scala">
                Select the file and double-click to open it.
            </hint>
        </component>
        <transition goto="INSPECT-CODE">
            <observer type="file" action="open" path="Table/src/Table.scala"/>
        </transition>
    </state>

    <state key="INSPECT-CODE">
        <component type="editor" path="Table/src/Table.scala">
            <highlight degree="normal"/>
            <scene>
                <hint navigable="true">
                    Here, you see a small program
                    that arranges its input into a table
                    and prints the output in to the console.
                </hint>
            </scene>
            <scene>
                <component type="editor.block" lines="natoAlphabets">
                    <highlight degree="focus"/>
                    <hint navigable="true">
                        There are two test cases already written for our program.
                        This one prints all the 26 Nato alphabets in a table with four columns.
                    </hint>
                </component>
            </scene>
            <scene>
                <component type="editor.block" lines="months">
                    <highlight degree="focus"/>
                    <hint navigable="true">
                        This test case prints twelve months in a table with three columns.
                    </hint>
                </component>
            </scene>
            <scene>
                <component type="editor.block" lines="printTable">
                    <highlight degree="focus"/>
                    <hint navigable="true">
                        This is the actual function that draws the table takes two arguments:
                        the number of columns in the table and the list of the data
                        that is put to the table.
                    </hint>
                </component>
            </scene>
            <scene>
                <component type="editor.run" lines="natoAlphabets">
                    <highlight degree="focus"/>
                    <hint title="Now, try to run the first test case" navigable="true">
                        Select "Run 'natoAlphabets'".
                    </hint>
                </component>
                <transition goto="WAIT-FOR-FINISH">
                    <observer type="run" action="launch"/>
                </transition>
            </scene>
        </component>
    </state>

    <state key="WAIT-FOR-FINISH">
        <transition goto="INSPECT-RESULT">
            <observer type="run" action="finish"/>
        </transition>
        <component type="editor" path="Table/src/Table.scala">
            <component type="editor.run" lines="natoAlphabets">
                <hint keep-visible="true">
                    Wait for the run to finish.
                </hint>
            </component>
        </component>
    </state>

    <state key="INSPECT-RESULT">
        <component type="run-window">
            <highlight degree="normal"/>
            <hint title="See the output">
                This test case runs as it should; the output is what we expected.
                <transition label="OK" goto="RUN-SECOND"/>
            </hint>
        </component>
    </state>

    <state key="RUN-SECOND">
        <component type="editor" path="Table/src/Table.scala">
            <highlight degree="normal"/>
            <component type="editor.run" lines="months">
                <highlight degree="focus"/>
                <hint title="Try to run the second test case">
                    Select "Run 'months'".
                </hint>
            </component>
            <transition goto="WAIT-FOR-SECOND-FINISH">
                <observer type="run" action="launch"/>
            </transition>
        </component>
    </state>

    <state key="WAIT-FOR-SECOND-FINISH">
        <transition goto="INSPECT-SECOND-RESULT">
            <observer type="run" action="finish"/>
        </transition>
        <component type="editor" path="Table/src/Table.scala">
            <component type="editor.run" lines="months">
                <hint keep-visible="true">
                    Wait for the run to finish.
                </hint>
            </component>
        </component>
    </state>

    <state key="INSPECT-SECOND-RESULT">
        <component type="run-window">
            <highlight degree="normal"/>
            <hint title="See the output">
                This time, the output is not as it should. There is an extra row in the bottom of the table.
                <transition label="OK" goto="INSPECT-CODE-AGAIN"/>
            </hint>
        </component>
    </state>

    <state key="INSPECT-CODE-AGAIN">
        <component type="editor" path="Table/src/Table.scala">
            <highlight degree="normal"/>
            <scene>
                <hint navigable="true">
                    Let's take a closer look at the code that prints the table.
                </hint>
            </scene>
            <component type="editor.block" lines="printTable>for">
                <highlight degree="focus"/>
                <scene>
                    <hint navigable="true">
                        Here's the for-loop that prints both the cells and lines separating them.
                        Considering that there seems to be one extra row in the output, we could try to make the loop
                        run one time fewer than it currently does.
                    </hint>
                </scene>
                <scene>
                    <hint navigable="true">
                        Edit the 'until' clause so that it runs one time fewer. Notice that the size of one step is not
                        1 as usual but a variable. So, you should subtract that from the clause to make the loop stop
                        one step earlier.
                    </hint>
                </scene>
                <transition goto="TRY-RUN-FIXED">
                    <observer type="code" lang="scala3">

                    </observer>
                </transition>
            </component>
        </component>
    </state>


</tutorial>