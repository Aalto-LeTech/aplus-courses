plugins {
    id 'scala'
    id 'checkstyle'
    id 'com.github.alisiikh.scalastyle' version '3.5.0'
    id 'org.jetbrains.intellij' version '1.16.1'
    id 'org.sonarqube' version '4.4.1.3373'
    id 'jacoco'
}

def pluginVersion = '3.17'

def courseVersion = '1.0'

group 'fi.aalto.cs'
version pluginVersion

sourceCompatibility = 17

repositories {
    mavenCentral()
    maven { url = "https://packages.jetbrains.team/maven/p/ij/intellij-dependencies" }
}

dependencies {
    implementation group: 'net.lingala.zip4j', name: 'zip4j', version: '2.11.5'
    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.10.3'
    testRuntimeOnly("org.junit.platform:junit-platform-launcher:1.10.2")
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.10.2'
    test.useJUnitPlatform()
    compileOnly group: 'org.scala-lang', name: 'scala-library', version: '2.13.14'
    implementation group: 'org.json', name: 'json', version: '20240303'
    testImplementation group: 'junit', name: 'junit', version: '4.13.2'
    testImplementation group: 'org.hamcrest', name: 'hamcrest', version: '2.2'
    testImplementation group: 'org.mockito', name: 'mockito-core', version: '5.11.0'
    testImplementation group: 'org.scala-lang', name: 'scala-library', version: '2.13.14'
    testImplementation(group: 'io.rest-assured', name: 'rest-assured', version: '4.2.0') {
        exclude group: 'org.codehaus.groovy', module: 'groovy-xml'
    }
}

intellij {
    // this is the version of the IntelliJ IDEA API (SDK) used to build the plugin
    // https://plugins.jetbrains.com/docs/intellij/tools-gradle-intellij-plugin.html#intellij-extension-version
    version = '2023.3'
    updateSinceUntilBuild = false
    plugins = ['java', 'org.intellij.scala:2023.3.17']
}

patchPluginXml {
    version.set(pluginVersion)
}

publishPlugin {
    token = System.getenv('INTELLIJ_PUBLISH_TOKEN')
    channels = [System.getenv('INTELLIJ_PUBLISH_CHANNEL')]
}

checkstyle {
    configFile = file('checkstyle/google_checks.xml')
    maxWarnings = 0
}

scalastyle {
    config = file('scalastyle/scalastyle-checks.xml')
    scalaVersion = '2.13'
    failOnWarning = true
    sourceSets {
        test {
            skip = true
        }
    }
}

task gatherBuildInfo(dependsOn: processResources) {
    doLast {
        new File("$buildDir/resources/main/build-info.properties").withWriter { writer ->
            Properties props = new Properties()
            props['version'] = pluginVersion
            props['courseVersion'] = courseVersion
            props.store(writer, null)
        }
    }
}

classes.dependsOn gatherBuildInfo

check.dependsOn jacocoTestReport

jacocoTestReport {
    reports.xml.required
}

sonarqube {
    properties {
        property 'sonar.projectKey', 'Aalto-LeTech_intellij-plugin'
        property 'sonar.organization', 'aalto-letech-intellij-plugin'
        property 'sonar.host.url', 'https://sonarcloud.io'
        property 'sonar.analysis.mode', 'publish'
        property 'sonar.java.binaries', 'build/classes'
        property 'sonar.java.libraries', 'build/libs'
        property 'sonar.coverage.exclusions', 'src/test/**/*'
    }
}
