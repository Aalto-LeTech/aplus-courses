plugins {
    id 'scala'
    id 'org.jetbrains.kotlin.jvm' version '1.3.72'
    id 'checkstyle'
    id 'com.github.alisiikh.scalastyle' version '3.3.1'
    id 'org.jetbrains.intellij' version '0.4.21'
    id 'org.sonarqube' version '3.1.1'
    id 'jacoco'
}

group 'fi.aalto.cs'
version '2.0'

sourceCompatibility = 1.8

def remoteRobotVersion = '0.10.3'
def fixturesVersion = "1.1.18"

repositories {
    mavenCentral()
    jcenter()
    maven { url = "https://jetbrains.bintray.com/intellij-third-party-dependencies" }
}

dependencies {
    compile group: 'commons-io', name: 'commons-io', version: '2.6'
    compile group: 'net.lingala.zip4j', name: 'zip4j', version: '2.6.3'
    compileOnly group: 'org.scala-lang', name: 'scala-library', version: '2.13.4'
    implementation group: 'org.json', name: 'json', version: '20190722'
    testCompile group: 'junit', name: 'junit', version: '4.12'
    testCompile group: 'org.hamcrest', name: 'hamcrest', version: '2.2'
    testCompile group: 'org.mockito', name: 'mockito-core', version: '3.2.4'
    testCompile group: 'org.powermock', name: 'powermock-module-junit4', version: '2.0.2'
    testCompile group: 'org.powermock', name: 'powermock-api-mockito2', version: '2.0.2'
    testCompile group: 'org.scala-lang', name: 'scala-library', version: '2.13.4'
    testCompile('io.rest-assured:rest-assured:4.2.0') {
        exclude group:'org.codehaus.groovy', module: 'groovy-xml'
    }
    testImplementation("com.intellij.remoterobot:remote-robot:$remoteRobotVersion")
    testImplementation("com.intellij.remoterobot:remote-fixtures:$fixturesVersion")
}

intellij {
    //  this is the version of the IntelliJ IDEA API (SDK) used to build the plugin
    version '2020.3.2'
    plugins = ['java', 'org.intellij.scala:2020.3.19']
    downloadRobotServerPlugin.version = remoteRobotVersion
}

sourceSets {
    e2e {
        kotlin.srcDir "$projectDir/src/e2e/kotlin"
    }
}

compileE2eKotlin {
    kotlinOptions {
        jvmTarget = "1.8"
    }
}

configurations {
    e2eImplementation.extendsFrom testImplementation
    e2eRuntime.extendsFrom testRuntime
}

publishPlugin {
    token = System.getenv('INTELLIJ_PUBLISH_TOKEN')
    channels = [System.getenv('INTELLIJ_PUBLISH_CHANNEL')]
}

checkstyle {
    configFile = file('checkstyle/google_checks.xml')
    maxWarnings = 0
}

scalastyle {
    config = file('scalastyle/scalastyle-checks.xml')
    scalaVersion = '2.13'
    failOnWarning = true
    sourceSets {
        test {
            skip = true
        }
    }
}

task uiTest(type: Test) {
    testClassesDirs = sourceSets.e2e.output.classesDirs
    classpath = sourceSets.e2e.runtimeClasspath
}


task gatherBuildInfo(dependsOn: processResources) {
    doLast {
        new File("$buildDir/resources/main/build-info.properties").withWriter { writer ->
            Properties props = new Properties()
            props['version'] = version
            props.store(writer, null)
        }
    }
}

classes.dependsOn gatherBuildInfo

check.dependsOn jacocoTestReport

jacocoTestReport {
    reports.xml.enabled true
}

sonarqube {
    properties {
        property 'sonar.projectKey', 'Aalto-LeTech_intellij-plugin'
        property 'sonar.organization', 'aalto-letech-intellij-plugin'
        property 'sonar.host.url', 'https://sonarcloud.io'
        property 'sonar.analysis.mode', 'publish'
        property 'sonar.java.binaries', 'build/classes'
        property 'sonar.java.libraries', 'build/libs'
        property 'sonar.coverage.exclusions', 'src/test/**/*'
    }
}

runIdeForUiTests {
//    systemProperty 'robot-server.port', '50000'
    systemProperty 'jb.consents.confirmation.enabled', 'false'
    systemProperty 'jb.privacy.policy.text', '<!--999.999-->'
    systemProperty 'ide.show.tips.on.startup.default.value', 'false'
    systemProperty 'io.netty.tryReflectionSetAccessible', 'false'
}
